Index: chrome/browser/gpu_process_host_ui_shim.cc
===================================================================
--- chrome/browser/gpu_process_host_ui_shim.cc	(revision 87952)
+++ chrome/browser/gpu_process_host_ui_shim.cc	(working copy)
@@ -102,7 +102,7 @@
 
 GpuProcessHostUIShim::GpuProcessHostUIShim()
     : host_id_(++g_last_host_id),
-      gpu_process_(NULL) {
+      gpu_process_(0) {
   g_hosts_by_id.AddWithID(this, host_id_);
   gpu_data_manager_ = GpuDataManager::GetInstance();
   DCHECK(gpu_data_manager_);
@@ -236,7 +236,7 @@
     channel_requests_.pop();
     EstablishChannelError(callback.release(),
                           IPC::ChannelHandle(),
-                          NULL,
+                          0,
                           GPUInfo());
   }
 
@@ -266,7 +266,7 @@
   // If GPU features are already blacklisted, no need to establish the channel.
   if (gpu_data_manager_->GetGpuFeatureFlags().flags() != 0) {
     EstablishChannelError(
-        wrapped_callback.release(), IPC::ChannelHandle(), NULL, GPUInfo());
+        wrapped_callback.release(), IPC::ChannelHandle(), 0, GPUInfo());
     return;
   }
 
@@ -274,7 +274,7 @@
     channel_requests_.push(wrapped_callback);
   } else {
     EstablishChannelError(
-        wrapped_callback.release(), IPC::ChannelHandle(), NULL, GPUInfo());
+        wrapped_callback.release(), IPC::ChannelHandle(), 0, GPUInfo());
   }
 }
 
@@ -419,7 +419,7 @@
     Send(new GpuMsg_CloseChannel(channel_handle));
     EstablishChannelError(callback.release(),
                           IPC::ChannelHandle(),
-                          NULL,
+                          0,
                           gpu_info);
     AddCustomLogMessage(logging::LOG_WARNING, "WARNING",
         "Hardware acceleration is unavailable.");
@@ -536,4 +536,3 @@
 }
 
 #endif
-
Index: chrome/gpu/gpu_channel.cc
===================================================================
--- chrome/gpu/gpu_channel.cc	(revision 87952)
+++ chrome/gpu/gpu_channel.cc	(working copy)
@@ -26,8 +26,8 @@
                        int renderer_id)
     : gpu_thread_(gpu_thread),
       renderer_id_(renderer_id),
-      renderer_process_(NULL),
-      renderer_pid_(NULL) {
+      renderer_process_(0),
+      renderer_pid_(0) {
   DCHECK(gpu_thread);
   DCHECK(renderer_id);
   const CommandLine* command_line = CommandLine::ForCurrentProcess();
@@ -256,4 +256,3 @@
   return fd;
 }
 #endif  // defined(OS_POSIX)
-
